import {
  Alert,
  Button,
  Container,
  Grid,
  List,
  ListItem,
  ListItemButton,
  Typography,
} from "@mui/material";
import { signOut } from "next-auth/react";
import Head from "next/head";
import Link from "next/link";
import { useRouter } from "next/router";
import { ReactNode, useEffect } from "react";
import { usePermission } from "../lib/usePermission";

type Props = { title: string; children: ReactNode };

function toBase64(arrayBuffer: ArrayBuffer | null) {
  return (
    arrayBuffer &&
    btoa(String.fromCharCode.apply(null, new Uint8Array(arrayBuffer) as any))
    // .replace(/\+/g, "-")
    // .replace(/\//g, "_")
    // .replace(/=+$/, "")
  );
}

export function Layout({ children, title }: Props) {
  const { pathname } = useRouter();

  const notifPerm = usePermission("notifications");

  const pushPerm = usePermission("push");

  console.log({ notifPerms: notifPerm, pushPerms: pushPerm });

  useEffect(() => {
    if (notifPerm === "granted" && pushPerm === "granted") {
      registerServiceWorkerAndSubscribeToPush();
    }
  }, [notifPerm, pushPerm]);

  function registerServiceWorkerAndSubscribeToPush() {
    navigator.serviceWorker.register("/sw.js");

    navigator.serviceWorker.ready.then((swr) => {
      swr.pushManager
        .subscribe({
          userVisibleOnly: true,
          applicationServerKey: process.env.NEXT_PUBLIC_VAPID_PUBKEY,
        })
        .then((subscription) => {
          fetch("/api/push", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
              endpoint: subscription.endpoint,
              auth: toBase64(subscription.getKey("auth")),
              p256dh: toBase64(subscription.getKey("p256dh")),
            }),
          });
        });
    });
  }

  const handleRegisterClick = () => {
    Notification.requestPermission();
  };

  const handleLogOutClick = async () => {
    const swr = await navigator.serviceWorker.getRegistration();

    const sub = await swr?.pushManager.getSubscription();

    if (sub?.endpoint) {
      await fetch("/api/push/" + encodeURIComponent(sub.endpoint), {
        method: "DELETE",
      });
    }

    signOut();
  };

  return (
    <Container>
      <Head>
        <title>{title}</title>

        <meta name="description" content="Generated by create next app" />

        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Typography variant="h4" sx={{ mt: 2, mb: 1 }}>
        {title}
      </Typography>

      {notifPerm === "prompt" && (
        <Alert
          severity="warning"
          action={
            <Button onClick={handleRegisterClick} color="inherit" size="small">
              Enable notifications
            </Button>
          }
        >
          Notifications are not enabled.
        </Alert>
      )}

      {notifPerm === "denied" && (
        <Alert severity="error">Notifications are denied</Alert>
      )}

      <Grid container spacing={2}>
        <Grid item xs={12} sm={2}>
          <List>
            <ListItem disablePadding>
              <Link href="/">
                <ListItemButton component="a" selected={pathname === "/"}>
                  Offers
                </ListItemButton>
              </Link>
            </ListItem>

            <ListItem disablePadding>
              <Link href="/contacts">
                <ListItemButton
                  component="a"
                  selected={pathname === "/contacts"}
                >
                  Contacts
                </ListItemButton>
              </Link>
            </ListItem>

            <ListItem disablePadding>
              <Link href="/settings">
                <ListItemButton
                  component="a"
                  selected={pathname === "/settings"}
                >
                  Settings
                </ListItemButton>
              </Link>
            </ListItem>

            <ListItem disablePadding>
              <ListItemButton onClick={handleLogOutClick}>
                Log out
              </ListItemButton>
            </ListItem>
          </List>
        </Grid>

        <Grid item xs={12} sm={10}>
          {children}
        </Grid>
      </Grid>
    </Container>
  );
}
