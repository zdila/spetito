// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Offer {
  id           String         @id @default(cuid())
  createdAt    DateTime       @default(now()) @map(name: "created_at")
  updatedAt    DateTime       @updatedAt @map(name: "updated_at")
  validFrom    DateTime?      @map(name: "valid_from")
  validTo      DateTime?      @map(name: "valid_to")
  message      String
  author       User?          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String?
  offerLists   OfferList[]
  offerUsers   OfferUser[]
  hiddenOffers HiddenOffers[]
  lng          Float?
  lat          Float?
  zoom         Float?
  radius       Int?

  @@map(name: "offers")
}

model HiddenOffers {
  offer   Offer  @relation(fields: [offerId], references: [id], onDelete: Cascade)
  offerId String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String

  @@id([offerId, userId])
  @@map(name: "hidden_offers")
}

model List {
  id         String       @id @default(cuid())
  name       String
  owner      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  members    ListMember[]
  offerLists OfferList[]

  @@map(name: "lists")
}

model ListMember {
  list   List   @relation(fields: [listId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  listId String

  @@id([userId, listId])
  @@map(name: "list_members")
}

model OfferList {
  offer   Offer  @relation(fields: [offerId], references: [id], onDelete: Cascade)
  list    List   @relation(fields: [listId], references: [id], onDelete: Cascade)
  offerId String
  listId  String

  @@id([offerId, listId])
  @@map(name: "offer_lists")
}

model OfferUser {
  offer   Offer  @relation(fields: [offerId], references: [id], onDelete: Cascade)
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  offerId String
  userId  String

  @@id([offerId, userId])
  @@map(name: "offer_users")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id                  String             @id @default(cuid())
  name                String?
  email               String?            @unique
  emailVerified       DateTime?          @map("email_verified")
  image               String?
  createdAt           DateTime           @default(now()) @map(name: "created_at")
  updatedAt           DateTime           @updatedAt @map(name: "updated_at")
  posts               Offer[]
  accounts            Account[]
  sessions            Session[]
  lists               List[]
  listMemebers        ListMember[]
  followedBy          Follows[]          @relation("following")
  following           Follows[]          @relation("follower")
  invitedBy           Invitation[]       @relation("inviting")
  inviting            Invitation[]       @relation("inviter")
  offerUsers          OfferUser[]
  pushRegistrations   PushRegistration[]
  hiddenOffers        HiddenOffers[]
  hideFewFriendsAlert Boolean            @default(false)
  language            String?
  timeZone            String?
  useEmailNotif       Boolean            @default(true)
  usePushNotif        Boolean            @default(true)

  @@map(name: "users")
}

model Follows {
  follower    User     @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  followerId  String
  following   User     @relation("following", fields: [followingId], references: [id], onDelete: Cascade)
  followingId String
  createdAt   DateTime @default(now())

  @@id([followerId, followingId])
  @@map(name: "follows")
}

model Invitation {
  inviter    User     @relation("inviter", fields: [inviterId], references: [id], onDelete: Cascade)
  inviting   User     @relation("inviting", fields: [invitingId], references: [id], onDelete: Cascade)
  inviterId  String
  invitingId String
  createdAt  DateTime @default(now())

  @@id([inviterId, invitingId])
  @@map(name: "invites")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model PushRegistration {
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String
  endpoint String @id @db.VarChar(255)
  auth     Bytes
  p256dh   Bytes

  @@map("push_registrations")
}
